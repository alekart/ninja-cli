{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "ninja-cli://config/schema.json",
  "title": "Ninja CLI Configuration",
  "type": "object",
  "properties": {
    "$schema": {
      "type": "string"
    },
    "version": {
      "$ref": "#/definitions/fileVersion"
    },
    "newProjectRoot": {
      "type": "string",
      "description": "Path where new projects will be created."
    },
    "defaultProject": {
      "type": "string",
      "description": "Default project name used in commands."
    },
    "projects": {
      "type": "object",
      "patternProperties": {
        "^(?:@[a-zA-Z0-9_-]+/)?[a-zA-Z0-9_-]+$": {
          "$ref": "#/definitions/project"
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": false,
  "required": [
    "version"
  ],
  "definitions": {
    "fileVersion": {
      "type": "integer",
      "description": "File format version",
      "minimum": 1
    },
    "project": {
      "type": "object",
      "properties": {
        "root": {
          "type": "string",
          "description": "Root of the project files."
        },
        "i18n": {
          "$ref": "#/definitions/project/definitions/i18n"
        },
        "sourceRoot": {
          "type": "string",
          "description": "The root of the source files, assets and index.html file structure."
        },
        "templatesRoot": {
          "type": "string",
          "description": "The root of the nunjucks templates files."
        },
        "dataRoot": {
          "type": "string",
          "description": "The root of the data .json files to load into nunjucks environment."
        },
        "assetsRoot": {
          "type": "string",
          "description": "The root of the assets files, to watch changes."
        },
        "architect": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/project/definitions/target"
          }
        }
      },
      "required": [
        "root",
        "sourceRoot",
        "templatesRoot",
        "assetsRoot"
      ],
      "anyOf": [
        {
          "required": [
            "architect"
          ]
        }
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z]{1,3}-.*": {}
      },
      "definitions": {
        "i18n": {
          "description": "Project i18n options",
          "type": "object",
          "properties": {
            "sourceLocale": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "Specifies the source locale of the application.",
                  "default": "en-US",
                  "$comment": "IETF BCP 47 language tag (simplified)",
                  "pattern": "^[a-zA-Z]{2,3}(-[a-zA-Z]{4})?(-([a-zA-Z]{2}|[0-9]{3}))?(-[a-zA-Z]{5,8})?(-x(-[a-zA-Z0-9]{1,8})+)?$"
                },
                {
                  "type": "object",
                  "description": "Localization options to use for the source locale",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Specifies the locale code of the source locale",
                      "pattern": "^[a-zA-Z]{2,3}(-[a-zA-Z]{4})?(-([a-zA-Z]{2}|[0-9]{3}))?(-[a-zA-Z]{5,8})?(-x(-[a-zA-Z0-9]{1,8})+)?$"
                    },
                    "baseHref": {
                      "type": "string",
                      "description": "HTML base HREF to use for the locale (defaults to the locale code)"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            "outputPath": {
              "type": "string",
              "description": "Destination of extraction of i18n files.",
              "default": "locales"
            },
            "locales": {
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "^[a-zA-Z]{2,3}(-[a-zA-Z]{4})?(-([a-zA-Z]{2}|[0-9]{3}))?(-[a-zA-Z]{5,8})?(-x(-[a-zA-Z0-9]{1,8})+)?$": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Localization file to use for i18n"
                    },
                    {
                      "type": "array",
                      "description": "Localization files to use for i18n",
                      "items": {
                        "type": "string",
                        "uniqueItems": true
                      }
                    },
                    {
                      "type": "object",
                      "description": "Localization options to use for the locale",
                      "properties": {
                        "translation": {
                          "oneOf": [
                            {
                              "type": "string",
                              "description": "Localization file to use for i18n"
                            },
                            {
                              "type": "array",
                              "description": "Localization files to use for i18n",
                              "items": {
                                "type": "string",
                                "uniqueItems": true
                              }
                            }
                          ]
                        },
                        "baseHref": {
                          "type": "string",
                          "description": "HTML base HREF to use for the locale (defaults to the locale code)"
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false,
          "required": [
            "outputPath"
          ]
        },
        "target": {
          "oneOf": [
            {
              "$comment": "Extendable target with custom builder",
              "type": "object",
              "properties": {
                "builder": {
                  "type": "string",
                  "description": "The builder used for this package.",
                  "not": {
                    "enum": [
                      "@angular-devkit/build-angular:app-shell",
                      "@angular-devkit/build-angular:browser",
                      "@angular-devkit/build-angular:dev-server",
                      "@angular-devkit/build-angular:extract-i18n",
                      "@angular-devkit/build-angular:karma",
                      "@angular-devkit/build-angular:protractor",
                      "@angular-devkit/build-angular:server",
                      "@angular-devkit/build-angular:ng-packagr"
                    ]
                  }
                },
                "defaultConfiguration": {
                  "type": "string",
                  "description": "A default named configuration to use when a target configuration is not provided."
                },
                "options": {
                  "type": "object"
                },
                "configurations": {
                  "type": "object",
                  "description": "A map of alternative target options.",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "additionalProperties": false,
              "required": [
                "builder"
              ]
            },
            {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "builder": {
                  "const": "@angular-devkit/build-angular:app-shell"
                },
                "defaultConfiguration": {
                  "type": "string",
                  "description": "A default named configuration to use when a target configuration is not provided."
                },
                "options": {
                  "$ref": "#/definitions/AngularDevkitBuildAngularBuildersAppShellSchema"
                },
                "configurations": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/AngularDevkitBuildAngularBuildersAppShellSchema"
                  }
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "builder": {
                  "const": "@angular-devkit/build-angular:browser"
                },
                "defaultConfiguration": {
                  "type": "string",
                  "description": "A default named configuration to use when a target configuration is not provided."
                },
                "options": {
                  "$ref": "#/definitions/AngularDevkitBuildAngularBuildersBrowserSchema"
                },
                "configurations": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/AngularDevkitBuildAngularBuildersBrowserSchema"
                  }
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "builder": {
                  "const": "@angular-devkit/build-angular:dev-server"
                },
                "defaultConfiguration": {
                  "type": "string",
                  "description": "A default named configuration to use when a target configuration is not provided."
                },
                "options": {
                  "$ref": "#/definitions/AngularDevkitBuildAngularBuildersDevServerSchema"
                },
                "configurations": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/AngularDevkitBuildAngularBuildersDevServerSchema"
                  }
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "builder": {
                  "const": "@angular-devkit/build-angular:extract-i18n"
                },
                "defaultConfiguration": {
                  "type": "string",
                  "description": "A default named configuration to use when a target configuration is not provided."
                },
                "options": {
                  "$ref": "#/definitions/AngularDevkitBuildAngularBuildersExtractI18nSchema"
                },
                "configurations": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/AngularDevkitBuildAngularBuildersExtractI18nSchema"
                  }
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "builder": {
                  "const": "@angular-devkit/build-angular:karma"
                },
                "defaultConfiguration": {
                  "type": "string",
                  "description": "A default named configuration to use when a target configuration is not provided."
                },
                "options": {
                  "$ref": "#/definitions/AngularDevkitBuildAngularBuildersKarmaSchema"
                },
                "configurations": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/AngularDevkitBuildAngularBuildersKarmaSchema"
                  }
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "builder": {
                  "const": "@angular-devkit/build-angular:protractor"
                },
                "defaultConfiguration": {
                  "type": "string",
                  "description": "A default named configuration to use when a target configuration is not provided."
                },
                "options": {
                  "$ref": "#/definitions/AngularDevkitBuildAngularBuildersProtractorSchema"
                },
                "configurations": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/AngularDevkitBuildAngularBuildersProtractorSchema"
                  }
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "builder": {
                  "const": "@angular-devkit/build-angular:server"
                },
                "defaultConfiguration": {
                  "type": "string",
                  "description": "A default named configuration to use when a target configuration is not provided."
                },
                "options": {
                  "$ref": "#/definitions/AngularDevkitBuildAngularBuildersServerSchema"
                },
                "configurations": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/AngularDevkitBuildAngularBuildersServerSchema"
                  }
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "builder": {
                  "const": "@angular-devkit/build-angular:ng-packagr"
                },
                "defaultConfiguration": {
                  "type": "string",
                  "description": "A default named configuration to use when a target configuration is not provided."
                },
                "options": {
                  "$ref": "#/definitions/AngularDevkitBuildAngularBuildersNgPackagrSchema"
                },
                "configurations": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/AngularDevkitBuildAngularBuildersNgPackagrSchema"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "global": {
      "type": "object",
      "properties": {
        "$schema": {
          "type": "string",
          "format": "uri"
        },
        "version": {
          "$ref": "#/definitions/fileVersion"
        },
        "cli": {
          "$ref": "#/definitions/cliOptions"
        },
        "schematics": {
          "$ref": "#/definitions/schematicOptions"
        }
      },
      "required": [
        "version"
      ]
    },
    "SchematicsAngularApplicationSchema": {
      "title": "Angular Application Options Schema",
      "type": "object",
      "description": "Generates a new basic application definition in the \"projects\" subfolder of the workspace.",
      "additionalProperties": false,
      "properties": {
        "projectRoot": {
          "description": "The root directory of the new app.",
          "type": "string",
          "visible": false
        },
        "name": {
          "description": "The name of the new app.",
          "type": "string",
          "pattern": "^(?:@[a-zA-Z0-9-*~][a-zA-Z0-9-*._~]*/)?[a-zA-Z0-9-~][a-zA-Z0-9-._~]*$",
          "$default": {
            "$source": "argv",
            "index": 0
          },
          "x-prompt": "What name would you like to use for the application?"
        },
        "skipPackageJson": {
          "type": "boolean",
          "default": false,
          "description": "Do not add dependencies to the \"package.json\" file."
        },
        "minimal": {
          "description": "Create a bare-bones project without any testing frameworks. (Use for learning purposes only.)",
          "type": "boolean",
          "default": false,
          "x-user-analytics": 14
        },
        "skipInstall": {
          "description": "Skip installing dependency packages.",
          "type": "boolean",
          "default": false
        },
        "strict": {
          "description": "Creates an application with stricter bundle budgets settings.",
          "type": "boolean",
          "default": true,
          "x-user-analytics": 7
        }
      }
    },
    "AngularDevkitBuildAngularBuildersAppShellSchema": {
      "title": "App Shell Target",
      "description": "App Shell target options for Build Facade.",
      "type": "object",
      "properties": {
        "browserTarget": {
          "type": "string",
          "description": "A browser builder target use for rendering the application shell in the format of `project:target[:configuration]`. You can also pass in more than one configuration name as a comma-separated list. Example: `project:target:production,staging`.",
          "pattern": "^[^:\\s]+:[^:\\s]+(:[^\\s]+)?$"
        },
        "serverTarget": {
          "type": "string",
          "description": "A server builder target use for rendering the application shell in the format of `project:target[:configuration]`. You can also pass in more than one configuration name as a comma-separated list. Example: `project:target:production,staging`.",
          "pattern": "^[^:\\s]+:[^:\\s]+(:[^\\s]+)?$"
        },
        "appModuleBundle": {
          "type": "string",
          "description": "Script that exports the Server AppModule to render. This should be the main JavaScript outputted by the server target. By default we will resolve the outputPath of the serverTarget and find a bundle named 'main' in it (whether or not there's a hash tag)."
        },
        "route": {
          "type": "string",
          "description": "The route to render.",
          "default": "/"
        },
        "inputIndexPath": {
          "type": "string",
          "description": "The input path for the index.html file. By default uses the output index.html of the browser target."
        },
        "outputIndexPath": {
          "type": "string",
          "description": "The output path of the index.html file. By default will overwrite the input file."
        }
      },
      "additionalProperties": false
    },
    "AngularDevkitBuildAngularBuildersBrowserSchema": {
      "title": "Webpack browser schema for Build Facade.",
      "description": "Browser target options",
      "type": "object",
      "properties": {
        "assets": {
          "type": "array",
          "description": "List of static application assets.",
          "default": [],
          "items": {
            "$ref": "#/definitions/AngularDevkitBuildAngularBuildersBrowserSchema/definitions/assetPattern"
          }
        },
        "main": {
          "type": "string",
          "description": "The full path for the main entry point to the app, relative to the current workspace."
        },
        "polyfills": {
          "type": "string",
          "description": "The full path for the polyfills file, relative to the current workspace."
        },
        "tsConfig": {
          "type": "string",
          "description": "The full path for the TypeScript configuration file, relative to the current workspace."
        },
        "scripts": {
          "description": "Global scripts to be included in the build.",
          "type": "array",
          "default": [],
          "items": {
            "$ref": "#/definitions/AngularDevkitBuildAngularBuildersBrowserSchema/definitions/extraEntryPoint"
          }
        },
        "styles": {
          "description": "Global styles to be included in the build.",
          "type": "array",
          "default": [],
          "items": {
            "$ref": "#/definitions/AngularDevkitBuildAngularBuildersBrowserSchema/definitions/extraEntryPoint"
          }
        },
        "inlineStyleLanguage": {
          "description": "The stylesheet language to use for the application's inline component styles.",
          "type": "string",
          "default": "css",
          "enum": [
            "css",
            "less",
            "sass",
            "scss"
          ]
        },
        "stylePreprocessorOptions": {
          "description": "Options to pass to style preprocessors.",
          "type": "object",
          "properties": {
            "includePaths": {
              "description": "Paths to include. Paths will be resolved to workspace root.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": []
            }
          },
          "additionalProperties": false
        },
        "optimization": {
          "description": "Enables optimization of the build output. Including minification of scripts and styles, tree-shaking, dead-code elimination, inlining of critical CSS and fonts inlining. For more information, see https://angular.io/guide/workspace-config#optimization-configuration.",
          "x-user-analytics": 16,
          "default": true,
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "scripts": {
                  "type": "boolean",
                  "description": "Enables optimization of the scripts output.",
                  "default": true
                },
                "styles": {
                  "description": "Enables optimization of the styles output.",
                  "default": true,
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "minify": {
                          "type": "boolean",
                          "description": "Minify CSS definitions by removing extraneous whitespace and comments, merging identifiers and minimizing values.",
                          "default": true
                        },
                        "inlineCritical": {
                          "type": "boolean",
                          "description": "Extract and inline critical CSS definitions to improve first paint time.",
                          "default": true
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                },
                "fonts": {
                  "description": "Enables optimization for fonts. This option requires internet access. `HTTPS_PROXY` environment variable can be used to specify a proxy server.",
                  "default": true,
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "inline": {
                          "type": "boolean",
                          "description": "Reduce render blocking requests by inlining external Google Fonts and Adobe Fonts CSS definitions in the application's HTML index file. This option requires internet access. `HTTPS_PROXY` environment variable can be used to specify a proxy server.",
                          "default": true
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "type": "boolean"
            }
          ]
        },
        "fileReplacements": {
          "description": "Replace compilation source files with other compilation source files in the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AngularDevkitBuildAngularBuildersBrowserSchema/definitions/fileReplacement"
          },
          "default": []
        },
        "outputPath": {
          "type": "string",
          "description": "The full path for the new output directory, relative to the current workspace.\n\nBy default, writes output to a folder named dist/ in the current project."
        },
        "resourcesOutputPath": {
          "type": "string",
          "description": "The path where style resources will be placed, relative to outputPath."
        },
        "aot": {
          "type": "boolean",
          "description": "Build using Ahead of Time compilation.",
          "x-user-analytics": 13,
          "default": true
        },
        "sourceMap": {
          "description": "Output source maps for scripts and styles. For more information, see https://angular.io/guide/workspace-config#source-map-configuration.",
          "default": false,
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "scripts": {
                  "type": "boolean",
                  "description": "Output source maps for all scripts.",
                  "default": true
                },
                "styles": {
                  "type": "boolean",
                  "description": "Output source maps for all styles.",
                  "default": true
                },
                "hidden": {
                  "type": "boolean",
                  "description": "Output source maps used for error reporting tools.",
                  "default": false
                },
                "vendor": {
                  "type": "boolean",
                  "description": "Resolve vendor packages source maps.",
                  "default": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "boolean"
            }
          ]
        },
        "vendorChunk": {
          "type": "boolean",
          "description": "Generate a seperate bundle containing only vendor libraries. This option should only used for development.",
          "default": false
        },
        "commonChunk": {
          "type": "boolean",
          "description": "Generate a seperate bundle containing code used across multiple bundles.",
          "default": true
        },
        "baseHref": {
          "type": "string",
          "description": "Base url for the application being built."
        },
        "deployUrl": {
          "type": "string",
          "description": "URL where files will be deployed.",
          "x-deprecated": "Use \"baseHref\" option, \"APP_BASE_HREF\" DI token or a combination of both instead. For more information, see https://angular.io/guide/deployment#the-deploy-url."
        },
        "verbose": {
          "type": "boolean",
          "description": "Adds more details to output logging.",
          "default": false
        },
        "progress": {
          "type": "boolean",
          "description": "Log progress to the console while building.",
          "default": true
        },
        "i18nMissingTranslation": {
          "type": "string",
          "description": "How to handle missing translations for i18n.",
          "enum": [
            "warning",
            "error",
            "ignore"
          ],
          "default": "warning"
        },
        "i18nDuplicateTranslation": {
          "type": "string",
          "description": "How to handle duplicate translations for i18n.",
          "enum": [
            "warning",
            "error",
            "ignore"
          ],
          "default": "warning"
        },
        "localize": {
          "description": "Translate the bundles in one or more locales.",
          "oneOf": [
            {
              "type": "boolean",
              "description": "Translate all locales."
            },
            {
              "type": "array",
              "description": "List of locales ID's to translate.",
              "minItems": 1,
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z]{2,3}(-[a-zA-Z]{4})?(-([a-zA-Z]{2}|[0-9]{3}))?(-[a-zA-Z]{5,8})?(-x(-[a-zA-Z0-9]{1,8})+)?$"
              }
            }
          ]
        },
        "watch": {
          "type": "boolean",
          "description": "Run build when files change.",
          "default": false
        },
        "outputHashing": {
          "type": "string",
          "description": "Define the output filename cache-busting hashing mode.",
          "default": "none",
          "enum": [
            "none",
            "all",
            "media",
            "bundles"
          ]
        },
        "poll": {
          "type": "number",
          "description": "Enable and define the file watching poll time period in milliseconds."
        },
        "deleteOutputPath": {
          "type": "boolean",
          "description": "Delete the output path before building.",
          "default": true
        },
        "preserveSymlinks": {
          "type": "boolean",
          "description": "Do not use the real path when resolving modules. If unset then will default to `true` if NodeJS option --preserve-symlinks is set."
        },
        "extractLicenses": {
          "type": "boolean",
          "description": "Extract all licenses in a separate file.",
          "default": true
        },
        "showCircularDependencies": {
          "type": "boolean",
          "description": "Show circular dependency warnings on builds.",
          "default": false,
          "x-deprecated": "The recommended method to detect circular dependencies in project code is to use either a lint rule or other external tooling."
        },
        "buildOptimizer": {
          "type": "boolean",
          "description": "Enables '@angular-devkit/build-optimizer' optimizations when using the 'aot' option.",
          "default": true
        },
        "namedChunks": {
          "type": "boolean",
          "description": "Use file name for lazy loaded chunks.",
          "default": false
        },
        "subresourceIntegrity": {
          "type": "boolean",
          "description": "Enables the use of subresource integrity validation.",
          "default": false
        },
        "serviceWorker": {
          "type": "boolean",
          "description": "Generates a service worker config for production builds.",
          "default": false
        },
        "ngswConfigPath": {
          "type": "string",
          "description": "Path to ngsw-config.json."
        },
        "index": {
          "description": "Configures the generation of the application's HTML index.",
          "oneOf": [
            {
              "type": "string",
              "description": "The path of a file to use for the application's HTML index. The filename of the specified path will be used for the generated file and will be created in the root of the application's configured output path."
            },
            {
              "type": "object",
              "description": "",
              "properties": {
                "input": {
                  "type": "string",
                  "minLength": 1,
                  "description": "The path of a file to use for the application's generated HTML index."
                },
                "output": {
                  "type": "string",
                  "minLength": 1,
                  "default": "index.html",
                  "description": "The output path of the application's generated HTML index file. The full provided path will be used and will be considered relative to the application's configured output path."
                }
              }
            }
          ]
        },
        "statsJson": {
          "type": "boolean",
          "description": "Generates a 'stats.json' file which can be analyzed using tools such as 'webpack-bundle-analyzer'.",
          "default": false
        },
        "budgets": {
          "description": "Budget thresholds to ensure parts of your application stay within boundaries which you set.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AngularDevkitBuildAngularBuildersBrowserSchema/definitions/budget"
          },
          "default": []
        },
        "webWorkerTsConfig": {
          "type": "string",
          "description": "TypeScript configuration for Web Worker modules."
        },
        "crossOrigin": {
          "type": "string",
          "description": "Define the crossorigin attribute setting of elements that provide CORS support.",
          "default": "none",
          "enum": [
            "none",
            "anonymous",
            "use-credentials"
          ]
        },
        "allowedCommonJsDependencies": {
          "description": "A list of CommonJS packages that are allowed to be used without a build time warning.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        }
      },
      "additionalProperties": false,
      "definitions": {
        "assetPattern": {
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "followSymlinks": {
                  "type": "boolean",
                  "default": false,
                  "description": "Allow glob patterns to follow symlink directories. This allows subdirectories of the symlink to be searched."
                },
                "glob": {
                  "type": "string",
                  "description": "The pattern to match."
                },
                "input": {
                  "type": "string",
                  "description": "The input directory path in which to apply 'glob'. Defaults to the project root."
                },
                "ignore": {
                  "description": "An array of globs to ignore.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "output": {
                  "type": "string",
                  "description": "Absolute path within the output."
                }
              },
              "additionalProperties": false
            },
            {
              "type": "string"
            }
          ]
        },
        "fileReplacement": {
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "src": {
                  "type": "string",
                  "pattern": "\\.(([cm]?j|t)sx?|json)$"
                },
                "replaceWith": {
                  "type": "string",
                  "pattern": "\\.(([cm]?j|t)sx?|json)$"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "replace": {
                  "type": "string",
                  "pattern": "\\.(([cm]?j|t)sx?|json)$"
                },
                "with": {
                  "type": "string",
                  "pattern": "\\.(([cm]?j|t)sx?|json)$"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "extraEntryPoint": {
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "input": {
                  "type": "string",
                  "description": "The file to include."
                },
                "bundleName": {
                  "type": "string",
                  "pattern": "^[\\w\\-.]*$",
                  "description": "The bundle name for this extra entry point."
                },
                "inject": {
                  "type": "boolean",
                  "description": "If the bundle will be referenced in the HTML file.",
                  "default": true
                }
              },
              "additionalProperties": false
            },
            {
              "type": "string",
              "description": "The file to include."
            }
          ]
        }
      }
    },
    "AngularDevkitBuildAngularBuildersDevServerSchema": {
      "title": "Dev Server Target",
      "description": "Dev Server target options for Build Facade.",
      "type": "object",
      "properties": {
        "browserTarget": {
          "type": "string",
          "description": "A browser builder target to serve in the format of `project:target[:configuration]`. You can also pass in more than one configuration name as a comma-separated list. Example: `project:target:production,staging`.",
          "pattern": "^[^:\\s]+:[^:\\s]+(:[^\\s]+)?$"
        },
        "port": {
          "type": "number",
          "description": "Port to listen on.",
          "default": 4200
        },
        "host": {
          "type": "string",
          "description": "Host to listen on.",
          "default": "localhost"
        },
        "proxyConfig": {
          "type": "string",
          "description": "Proxy configuration file. For more information, see https://angular.io/guide/build#proxying-to-a-backend-server."
        },
        "ssl": {
          "type": "boolean",
          "description": "Serve using HTTPS.",
          "default": false
        },
        "sslKey": {
          "type": "string",
          "description": "SSL key to use for serving HTTPS."
        },
        "sslCert": {
          "type": "string",
          "description": "SSL certificate to use for serving HTTPS."
        },
        "headers": {
          "type": "object",
          "description": "Custom HTTP headers to be added to all responses.",
          "propertyNames": {
            "pattern": "^[-_A-Za-z0-9]+$"
          },
          "additionalProperties": {
            "type": "string"
          }
        },
        "open": {
          "type": "boolean",
          "description": "Opens the url in default browser.",
          "default": false,
          "alias": "o"
        },
        "verbose": {
          "type": "boolean",
          "description": "Adds more details to output logging."
        },
        "liveReload": {
          "type": "boolean",
          "description": "Whether to reload the page on change, using live-reload.",
          "default": true
        },
        "publicHost": {
          "type": "string",
          "description": "The URL that the browser client (or live-reload client, if enabled) should use to connect to the development server. Use for a complex dev server setup, such as one with reverse proxies."
        },
        "allowedHosts": {
          "type": "array",
          "description": "List of hosts that are allowed to access the dev server.",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "servePath": {
          "type": "string",
          "description": "The pathname where the application will be served."
        },
        "disableHostCheck": {
          "type": "boolean",
          "description": "Don't verify connected clients are part of allowed hosts.",
          "default": false
        },
        "hmr": {
          "type": "boolean",
          "description": "Enable hot module replacement.",
          "default": false
        },
        "watch": {
          "type": "boolean",
          "description": "Rebuild on change.",
          "default": true
        },
        "poll": {
          "type": "number",
          "description": "Enable and define the file watching poll time period in milliseconds."
        }
      },
      "additionalProperties": false
    },
    "AngularDevkitBuildAngularBuildersExtractI18nSchema": {
      "title": "Extract i18n Target",
      "description": "Extract i18n target options for Build Facade.",
      "type": "object",
      "properties": {
        "browserTarget": {
          "type": "string",
          "description": "A browser builder target to extract i18n messages in the format of `project:target[:configuration]`. You can also pass in more than one configuration name as a comma-separated list. Example: `project:target:production,staging`.",
          "pattern": "^[^:\\s]+:[^:\\s]+(:[^\\s]+)?$"
        },
        "format": {
          "type": "string",
          "description": "Output format for the generated file.",
          "default": "xlf",
          "enum": [
            "xmb",
            "xlf",
            "xlif",
            "xliff",
            "xlf2",
            "xliff2",
            "json",
            "arb",
            "legacy-migrate"
          ]
        },
        "progress": {
          "type": "boolean",
          "description": "Log progress to the console.",
          "default": true
        },
        "outputPath": {
          "type": "string",
          "description": "Path where output will be placed."
        },
        "outFile": {
          "type": "string",
          "description": "Name of the file to output."
        }
      },
      "additionalProperties": false
    },
    "AngularDevkitBuildAngularBuildersServerSchema": {
      "title": "Universal Target",
      "type": "object",
      "properties": {
        "main": {
          "type": "string",
          "description": "The name of the main entry-point file."
        },
        "tsConfig": {
          "type": "string",
          "default": "tsconfig.app.json",
          "description": "The name of the TypeScript configuration file."
        },
        "inlineStyleLanguage": {
          "description": "The stylesheet language to use for the application's inline component styles.",
          "type": "string",
          "default": "css",
          "enum": [
            "css",
            "less",
            "sass",
            "scss"
          ]
        },
        "stylePreprocessorOptions": {
          "description": "Options to pass to style preprocessors",
          "type": "object",
          "properties": {
            "includePaths": {
              "description": "Paths to include. Paths will be resolved to workspace root.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": []
            }
          },
          "additionalProperties": false
        },
        "optimization": {
          "description": "Enables optimization of the build output. Including minification of scripts and styles, tree-shaking and dead-code elimination. For more information, see https://angular.io/guide/workspace-config#optimization-configuration.",
          "x-user-analytics": 16,
          "default": true,
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "scripts": {
                  "type": "boolean",
                  "description": "Enables optimization of the scripts output.",
                  "default": true
                },
                "styles": {
                  "type": "boolean",
                  "description": "Enables optimization of the styles output.",
                  "default": true
                }
              },
              "additionalProperties": false
            },
            {
              "type": "boolean"
            }
          ]
        },
        "fileReplacements": {
          "description": "Replace compilation source files with other compilation source files in the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AngularDevkitBuildAngularBuildersServerSchema/definitions/fileReplacement"
          },
          "default": []
        },
        "outputPath": {
          "type": "string",
          "description": "Path where output will be placed."
        },
        "resourcesOutputPath": {
          "type": "string",
          "description": "The path where style resources will be placed, relative to outputPath."
        },
        "sourceMap": {
          "description": "Output source maps for scripts and styles. For more information, see https://angular.io/guide/workspace-config#source-map-configuration.",
          "default": false,
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "scripts": {
                  "type": "boolean",
                  "description": "Output source maps for all scripts.",
                  "default": true
                },
                "styles": {
                  "type": "boolean",
                  "description": "Output source maps for all styles.",
                  "default": true
                },
                "hidden": {
                  "type": "boolean",
                  "description": "Output source maps used for error reporting tools.",
                  "default": false
                },
                "vendor": {
                  "type": "boolean",
                  "description": "Resolve vendor packages source maps.",
                  "default": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "boolean"
            }
          ]
        },
        "deployUrl": {
          "type": "string",
          "description": "URL where files will be deployed.",
          "x-deprecated": "Use \"baseHref\" browser builder option, \"APP_BASE_HREF\" DI token or a combination of both instead. For more information, see https://angular.io/guide/deployment#the-deploy-url."
        },
        "verbose": {
          "type": "boolean",
          "description": "Adds more details to output logging.",
          "default": false
        },
        "progress": {
          "type": "boolean",
          "description": "Log progress to the console while building.",
          "default": true
        },
        "i18nMissingTranslation": {
          "type": "string",
          "description": "How to handle missing translations for i18n.",
          "enum": [
            "warning",
            "error",
            "ignore"
          ],
          "default": "warning"
        },
        "i18nDuplicateTranslation": {
          "type": "string",
          "description": "How to handle duplicate translations for i18n.",
          "enum": [
            "warning",
            "error",
            "ignore"
          ],
          "default": "warning"
        },
        "localize": {
          "description": "Translate the bundles in one or more locales.",
          "oneOf": [
            {
              "type": "boolean",
              "description": "Translate all locales."
            },
            {
              "type": "array",
              "description": "List of locales ID's to translate.",
              "minItems": 1,
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z]{2,3}(-[a-zA-Z]{4})?(-([a-zA-Z]{2}|[0-9]{3}))?(-[a-zA-Z]{5,8})?(-x(-[a-zA-Z0-9]{1,8})+)?$"
              }
            }
          ]
        },
        "outputHashing": {
          "type": "string",
          "description": "Define the output filename cache-busting hashing mode.",
          "default": "none",
          "enum": [
            "none",
            "all",
            "media",
            "bundles"
          ]
        },
        "deleteOutputPath": {
          "type": "boolean",
          "description": "Delete the output path before building.",
          "default": true
        },
        "preserveSymlinks": {
          "type": "boolean",
          "description": "Do not use the real path when resolving modules. If unset then will default to `true` if NodeJS option --preserve-symlinks is set."
        },
        "extractLicenses": {
          "type": "boolean",
          "description": "Extract all licenses in a separate file, in the case of production builds only.",
          "default": true
        },
        "showCircularDependencies": {
          "type": "boolean",
          "description": "Show circular dependency warnings on builds.",
          "default": false,
          "x-deprecated": "The recommended method to detect circular dependencies in project code is to use either a lint rule or other external tooling."
        },
        "namedChunks": {
          "type": "boolean",
          "description": "Use file name for lazy loaded chunks.",
          "default": false
        },
        "bundleDependencies": {
          "description": "Which external dependencies to bundle into the bundle. By default, all of node_modules will be bundled.",
          "default": true,
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "enum": [
                "none",
                "all"
              ]
            }
          ]
        },
        "externalDependencies": {
          "description": "Exclude the listed external dependencies from being bundled into the bundle. Instead, the created bundle relies on these dependencies to be available during runtime.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "statsJson": {
          "type": "boolean",
          "description": "Generates a 'stats.json' file which can be analyzed using tools such as 'webpack-bundle-analyzer'.",
          "default": false
        },
        "watch": {
          "type": "boolean",
          "description": "Run build when files change.",
          "default": false
        },
        "poll": {
          "type": "number",
          "description": "Enable and define the file watching poll time period in milliseconds."
        }
      },
      "additionalProperties": false,
      "definitions": {
        "fileReplacement": {
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "src": {
                  "type": "string",
                  "pattern": "\\.(([cm]?j|t)sx?|json)$"
                },
                "replaceWith": {
                  "type": "string",
                  "pattern": "\\.(([cm]?j|t)sx?|json)$"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "replace": {
                  "type": "string",
                  "pattern": "\\.(([cm]?j|t)sx?|json)$"
                },
                "with": {
                  "type": "string",
                  "pattern": "\\.(([cm]?j|t)sx?|json)$"
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    }
  }
}
